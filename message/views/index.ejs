<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Messaging System</title>
    <link rel="stylesheet" href="/styles.css"> <!-- Include the styles.css file -->
</head>
<body>
    <div class="container">
        <div class="messages-container" id="messagesContainer">
            <ul id="messagesList"></ul>
        </div>
        <div class="container-send">
            <form id="messageForm">
                <input type="text" id="content" name="content" placeholder="Enter your message...">
                <button type="submit">Send</button>
            </form>
        </div>
    </div>


    <script>
// Global variable to track whether the user is currently scrolled up
let isScrolledUp = false;

// Function to check if user is scrolled up
function checkScrollPosition() {
    const messagesContainer = document.getElementById('messagesContainer');
    const distanceFromBottom = messagesContainer.scrollHeight - messagesContainer.clientHeight - messagesContainer.scrollTop;
    isScrolledUp = distanceFromBottom > 10; // Consider the user scrolled up if the distance from the bottom is less than 10 pixels
}

// Function to fetch messages
function fetchMessages() {
    fetch('/messages')
        .then(response => response.json())
        .then(messages => {
            const messagesList = document.getElementById('messagesList');
            const messagesContainer = document.getElementById('messagesContainer');
            const shouldMaintainScrollPosition = isScrolledUp; // Maintain scroll position if scrolled up
            const prevScrollHeight = messagesContainer.scrollHeight; // Store previous scroll height
            messagesList.innerHTML = '';
            messages.reverse().forEach(message => {
                const li = document.createElement('li');
                const timestamp = new Date(message.timestamp).toLocaleString();
                li.innerHTML = `<span class="timestamp">${timestamp}</span><span class="username">${message.username}:</span> ${message.content}`;
                li.classList.add(message.username === 'YourUsernameHere' ? 'user-message' : 'other-message');
                messagesList.appendChild(li);
            });
            if (!shouldMaintainScrollPosition) {
                scrollMessagesToBottom(); // Scroll to the bottom only if not scrolled up
            } else {
                // If scrolled up, maintain the scroll position
                messagesContainer.scrollTop += messagesContainer.scrollHeight - prevScrollHeight;
            }
        })
        .catch(error => console.error('Error fetching messages:', error))
        .finally(() => {
            if (!isScrolledUp) {
                scrollMessagesToBottom(); // Scroll to the bottom if not scrolled up
            }
        });
}

// Function to scroll messages container to the bottom
function scrollMessagesToBottom() {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Fetch messages initially
fetchMessages();

// Poll for new messages every 5 seconds
setInterval(fetchMessages, 500);

// Handle scroll event
document.getElementById('messagesContainer').addEventListener('scroll', checkScrollPosition);

// Handle form submission
document.getElementById('messageForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const content = document.getElementById('content').value;
    if (content.trim() !== '') {
        sendMessage(content);
    }
});

// Function to send message
function sendMessage(content) {
    fetch('/send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content })
    })
    .then(response => {
        if (response.ok) {
            document.getElementById('content').value = '';
        } else if (response.status === 401) {
            window.location.href = '/login-register';
        } else {
            console.error('Failed to send message:', response.statusText);
        }
    })
    .catch(error => console.error('Error sending message:', error));
}


    </script>
</body>
</html>
