<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Messaging System</title>
    <link rel="stylesheet" href="/styles.css"> <!-- Include the styles.css file -->
</head>
<body>
    <div class="container">
        <div class="messages-container" id="messagesContainer">
            <ul id="messagesList"></ul>
        </div>
        <div class="container-send">
            <form id="messageForm">
                <input type="text" id="content" name="content" placeholder="Enter your message...">
                <button type="submit">Send</button>
            </form>
        </div>
    </div>


    <script>
// Global variable to track whether the user is currently scrolled up
let isScrolledUp = false;

// Function to check if user is scrolled up
function checkScrollPosition() {
    const messagesContainer = document.getElementById('messagesContainer');
    const distanceFromBottom = messagesContainer.scrollHeight - messagesContainer.clientHeight - messagesContainer.scrollTop;
    isScrolledUp = distanceFromBottom > 10; // Consider the user scrolled up if the distance from the bottom is less than 10 pixels
}

const ws = new WebSocket(`ws://${window.location.host}/ws`);

// Function to handle incoming messages from WebSocket
ws.onmessage = function(event) {
    const message = JSON.parse(event.data);
    displayMessage(message);
};

// Function to display a message on the UI
function displayMessage(message) {
    const messagesList = document.getElementById('messagesList');
    const li = document.createElement('li');
    const timestamp = new Date(message.timestamp).toLocaleString();
    li.innerHTML = `<span class="timestamp">${timestamp}</span><span class="username">${message.username}:</span> ${message.content}`;
    li.classList.add(message.username === 'YourUsernameHere' ? 'user-message' : 'other-message');
    messagesList.appendChild(li);
    scrollMessagesToBottom();
}

// Function to scroll messages container to the bottom
function scrollMessagesToBottom() {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Handle form submission
document.getElementById('messageForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const content = document.getElementById('content').value;
    if (content.trim() !== '') {
        sendMessage(content);
    }
});


// Send message route
app.post('/send', isAuthenticated, async (req, res) => {
    try {
        const { content } = req.body; // Extract content from request body
        const token = req.cookies.token;
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const username = decoded.username;

        const message = new Message({ content, username }); // Include username when creating the message
        await message.save(); // Save message to database

        // Send message to all connected WebSocket clients
        wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify(message));
            }
        });

        res.sendStatus(200); // Send success response
    } catch (err) {
        console.error('Error sending message:', err);
        res.status(500).send('Internal Server Error');
    }
});


    </script>
</body>
</html>
