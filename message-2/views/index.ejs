<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Messaging System</title>
    <link rel="stylesheet" href="/styles.css"> <!-- Include the styles.css file -->
</head>
<body>
    <div class="container">
        <div class="messages-container" id="messagesContainer">
            <ul id="messagesList"></ul>
        </div>
        <div class="form-container">
            <form id="messageForm">
                <input type="text" id="content" name="content" placeholder="Enter your message...">
                <button type="submit">Send</button>
            </form>
        </div>
    </div>

    <script>
function fetchMessages() {
    fetch('/messages')
        .then(response => response.json())
        .then(messages => {
            const messagesList = document.getElementById('messagesList');
            const messagesContainer = document.getElementById('messagesContainer');
            const shouldScrollToBottom = messagesContainer.scrollTop === messagesContainer.scrollHeight - messagesContainer.clientHeight; // Check if already scrolled to bottom
            messagesList.innerHTML = '';
            messages.reverse().forEach(message => {
                const li = document.createElement('li');
                const timestamp = new Date(message.timestamp).toLocaleString(); // Format timestamp
                li.innerHTML = `<span class="timestamp">${timestamp}</span><span class="username">${message.username}:</span> ${message.content}`; // Display formatted message content, timestamp, and username
                li.classList.add(message.username === 'YourUsernameHere' ? 'user-message' : 'other-message'); // Add class based on message sender
                messagesList.appendChild(li);
            });
            if (shouldScrollToBottom) {
                scrollMessagesToBottom(); // Scroll to the bottom only if already scrolled to bottom
            }
        })
        .catch(error => console.error('Error fetching messages:', error))
        .finally(() => {
            scrollMessagesToBottom(); // Scroll to the bottom after fetching messages
        });
}


        // Function to scroll messages container to the bottom
        function scrollMessagesToBottom() {
            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    
        // Fetch messages initially
        fetchMessages();
    
        // Poll for new messages every 5 seconds
        setInterval(fetchMessages, 3000);

        // Handle form submission
        document.getElementById('messageForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            const content = document.getElementById('content').value;
            if (content.trim() !== '') { // Check if content is not empty
                sendMessage(content);
            }
        });

        // Function to send message
        function sendMessage(content) {
            fetch('/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content }) // Send content as JSON in the request body
            })
            .then(response => {
                if (response.ok) {
                    // Clear input field after successful message sending
                    document.getElementById('content').value = '';
                } else {
                    console.error('Failed to send message:', response.statusText);
                }
            })
            .catch(error => console.error('Error sending message:', error));
        }
    </script>
</body>
</html>
